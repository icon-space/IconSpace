/**
 * @file vue all.ts
 * @author Auto Generated by IconSpace
 */

import Vue, { VNode, ComponentOptions, VueConstructor } from 'vue';
import * as IconMap from './map';
import { IIconInstance, IIconProps } from './runtime';

export type IconType = keyof typeof IconMap;

export interface IIconSpaceInstance extends IIconInstance {
    // FIXME just use string to prevent type error.
    type: IconType | string;
}

export interface IIconAllProps extends Vue, IIconProps {
    type: IconType
}

function toPascalCase(val: string): string {
    return val.replace(/(^\w|-\w)/g, c => c.slice(-1).toUpperCase());
}

const options: ComponentOptions<IIconSpaceInstance> = {
    name: 'icon-space',
    props: ['type', 'theme', 'size', 'spin', 'fill', 'strokeLinecap', 'strokeLinejoin', 'strokeWidth'],
    inheritAttrs: true,
    render(this: IIconSpaceInstance, h): VNode {

        const type = toPascalCase(this.type);
        const {
            theme,
            size,
            fill,
            strokeLinecap,
            strokeLinejoin,
            strokeWidth,
            spin
        } = this;

        if (!(type in IconMap)) {
            throw new Error(`${type} is not a valid icon type name`);
        }

        return h(IconMap[type as IconType], {
            props: {
                theme,
                size,
                fill,
                strokeLinecap,
                strokeLinejoin,
                strokeWidth,
                spin,
            },
        });
    },
};

export const IconSpace: VueConstructor<IIconAllProps> = options as VueConstructor<IIconAllProps>;

export function install(Vue: VueConstructor, prefix?: string): void {
    Object.values(IconMap).forEach(icon => {
        Vue.component(prefix ? prefix + '-' + icon.name.slice(5) : icon.name, icon);
    });
}
